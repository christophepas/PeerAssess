{% trans_default_domain 'SiteCandidateBundle' %}

{% extends 'SiteCandidateBundle::layout.html.twig' %}

{% block page_title %}
	Test - {{ evaluationSession.evaluation.test.name }}
{% endblock %}

{% block content %}
	<div class="text-right m-t-lg insist c-primary">
		{{ 'test.remainingTime'|trans }} :
		<span class="remainingTime"></span>
	</div>
	<div class="card-pad m-t markdown">
		{{ evaluationSession.evaluation.test.readMe|markdown }}
		<div class="full-width text-center">
			<a href="{{ path('test_file_download', {'testId': evaluationSession.evaluation.test.id}) }}" class="btn btn-main btn-primary" target="blank">
				{{ 'test.startLink'|trans }}
			</a>
		</div>
	</div>
	<div id="finTest" class="m-t-lg m-b-lg">
		<p>
			{{ 'test.end.text'|trans }}
		</p>
		{{form_start(form)}}
			{{form_widget(form.resultFile)}}

			{{form_widget(form.save, {'attr': {'class': 'm-t btn btn-main-s'}})}}

		{{form_end(form)}}
	</div>
	{# Modal when the applicant click to go to the next test #}
	<div class="modal fade" id="next_modal" tabindex="-1" role="dialog" aria-labelledby="next_modal_label" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
					<h4 class="modal-title" id="next_modal_label">{{ 'test.modal.title'|trans }}</h4>
				</div>
				<div class="modal-body">
					{{ 'test.modal.text'|trans }}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">{{ 'common.cancel'|trans }}</button>
					<button type="button" class="btn btn-primary" data-dismiss="modal" id="next_modal_continue">{{ 'common.goOn'|trans }}</button>
				</div>
			</div>
		</div>
	</div>
{% endblock content %}

{% block javascript %}
	{{ parent() }}
	<script type="text/javascript">
		function setIntervalAndExecute(fn, t) {
			fn();
			return(setInterval(fn, t));
		}
		$(document).ready(function()
			{
				var duration = {{ evaluationSession.evaluation.test.duration }};
				var start = new Date('{{ evaluationSession.start|date}}');
				setIntervalAndExecute(function() {
					var now =  new Date();
					var dif = (now.getTime() - start.getTime())/1000 ;
					var remaining = duration-dif;

					var hours = parseInt( remaining / 3600 ) % 24;
					var minutes = parseInt( remaining / 60 ) % 60;
					var seconds = remaining % 60;
					var result = (hours < 10 ? "0" + hours : hours) + " {{ 'common.hoursAnd'|trans }} " + (minutes < 10 ? "0" + minutes : minutes) + " {{ 'common.minutes'|trans }}";
					if (remaining < 0 ){
						result = '{{ 'test.over'|trans }}';
					}
					$('.remainingTime').html(result);
				}, 60 * 1000);
			}
		);
	</script>
{% endblock javascript %}
