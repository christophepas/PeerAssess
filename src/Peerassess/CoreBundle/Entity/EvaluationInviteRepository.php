<?php

namespace Peerassess\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Peerassess\CoreBundle\Entity\Supervisor;
use Peerassess\CoreBundle\Entity\Status;
use Peerassess\CoreBundle\Entity\Candidate;

/**
 * EvaluationInviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvaluationInviteRepository extends EntityRepository
{
    /**
     * @param $supervisor \Peerassess\CoreBundle\Entity\Supervisor
     * @param $status integer
     */
    public function findBySupervisorAndStatus(Supervisor $supervisor, $status)
    {
        $qb = $this->createQueryBuilder('invite');
        $qb->leftJoin('invite.evaluationSession', 'es')->addSelect('es');
        $qb->leftJoin('invite.evaluation', 'e')->addSelect('e');
        $qb->leftJoin('e.supervisor', 'r')->addSelect('r');

        // Only active invites.
        $qb->where('invite.archivedDate IS NULL');

        // For the right supervisor.
        $qb->andWhere('r.id = :id')->setParameter('id', $supervisor->getId());

        // Only invites for the given status. If the status is CREATED, we'll
        // also take the invites that don't have sessions associated yet.
        if ($status === Status::CREATED) {
            $qb->andWhere('es IS NULL OR es.status = :status')
                ->setParameter('status', $status);
        } else if (null !== $status) {
            $qb->andWhere('es.status = :status')
                ->setParameter('status', $status);
        }
        return $qb->getQuery()->getResult();
    }

    public function findUnclaimed(Supervisor $supervisor, \DateInterval $interval)
    {
        $qb = $this->createQueryBuilder('invite');

        $fromDate = new \DateTime();
        $fromDate->sub($interval);

        $qb->leftJoin('invite.evaluationSession', 'es')->addSelect('es');
        $qb->leftJoin('invite.evaluation', 'e')->addSelect('e');
        $qb->leftJoin('e.supervisor', 'r')->addSelect('r');

        $qb->where('r.id = :rid')->setParameter('rid', $supervisor->getId());

        // Unclaimed.
        $qb->andWhere('es IS NULL');

        // And older than the interval.
        $qb->andWhere('invite.createdDate < :fromDate')->setParameter('fromDate', $fromDate);

        return $qb->getQuery()->getResult();
    }

    public function findByCandidate(Candidate $candidate)
    {
        $qb = $this->createQueryBuilder('i');
        $qb->leftJoin('i.evaluationSession', 'es')->addSelect('es');
        $qb->where('i.email = :email')->setParameter('email', $candidate->getUser()->getEmail());
        $qb->andWhere('es IS NULL');

        return $qb->getQuery()->getResult();
    }
}
